diff --git a.streamlitsecrets.toml b.streamlitsecrets.toml
new file mode 100644
index 0000000000000000000000000000000000000000..1fa033c91d2788bb76fb02337adca730e6c135e9
--- devnull
+++ b.streamlitsecrets.toml
@@ -0,0 +1,4 @@
+[google]
+client_id = YOUR_CLIENT_ID
+client_secret = YOUR_CLIENT_SECRET
+redirect_uri = httpsyour-app-name.streamlit.app
diff --git aREADME.md bREADME.md
index 9c0ea42beebbf979f1d9e3e2709705b80509a2e8..a96ea1f67278b57e2720bbb8bede8be141407dbf 100644
--- aREADME.md
+++ bREADME.md
@@ -1,22 +1,32 @@
-
 # YT Insights App
 
 This Streamlit app allows users to analyze YouTube videos using YouTube Data and Analytics APIs.
 
 ## Features
 
 - OAuth login
 - Key metrics extraction
 - Clean UI for creators and marketers
 
 ## Deploy on Streamlit
 
 1. Upload this repo to GitHub
 2. Go to httpsstreamlit.iocloud
 3. Connect GitHub and deploy `streamlit_app.py`
-4. Upload `client_secret.json` inside the app when prompted
+4. Set the following fields in `.streamlitsecrets.toml`
+
+```toml
+[google]
+client_id = YOUR_CLIENT_ID
+client_secret = YOUR_CLIENT_SECRET
+redirect_uri = httpsyour-app-name.streamlit.app
+```
+
+5. Install dependencies locally with `pip install -r requirements.txt` if you
+   run the app outside Streamlit Cloud.
 
 ## Notes
 
-- Do not upload `client_secret.json` to GitHub.
-- You can upload it inside the app at runtime via the file uploader.
+- The OAuth client ID and secret are kept private in `.streamlitsecrets.toml`.
+- Users authenticate with their own Google accounts during runtime.
+- Login credentials are stored in `st.session_state` and can be cleared with the Logout button.
diff --git arequirements.txt brequirements.txt
new file mode 100644
index 0000000000000000000000000000000000000000..24778bf29eb4390aa7c4ea16ffc2ff80cd344b1f
--- devnull
+++ brequirements.txt
@@ -0,0 +1,3 @@
+streamlit
+google-auth-oauthlib
+google-api-python-client
diff --git astreamlit_app.py bstreamlit_app.py
index 1c0a18bbda8dc4bca57937899eb6a0a0df5b0440..a698e76882c23322635e7a3f4a01067f06f8f1c0 100644
--- astreamlit_app.py
+++ bstreamlit_app.py
@@ -1,7 +1,104 @@
-
 import streamlit as st
+from google_auth_oauthlib.flow import Flow
+from googleapiclient.discovery import build
+from google.oauth2.credentials import Credentials
+from google.auth.transport.requests import Request
+
+SCOPES = [
+    httpswww.googleapis.comauthyoutube.readonly,
+    httpswww.googleapis.comauthyt-analytics.readonly,
+]
+
+
+def get_flow() - Flow
+    return Flow.from_client_config(
+        {
+            web {
+                client_id st.secrets[google][client_id],
+                client_secret st.secrets[google][client_secret],
+                auth_uri httpsaccounts.google.comooauth2auth,
+                token_uri httpsoauth2.googleapis.comtoken,
+            }
+        },
+        scopes=SCOPES,
+        redirect_uri=st.secrets[google][redirect_uri],
+    )
+
+
+def creds_to_dict(creds Credentials)
+    return {
+        token creds.token,
+        refresh_token creds.refresh_token,
+        token_uri creds.token_uri,
+        client_id creds.client_id,
+        client_secret creds.client_secret,
+        scopes creds.scopes,
+    }
+
+
+def get_credentials() - Credentials  None
+    if credentials not in st.session_state
+        return None
+    creds = Credentials(st.session_state.credentials)
+    if not creds.valid and creds.refresh_token
+        creds.refresh(Request())
+        st.session_state.credentials = creds_to_dict(creds)
+    return creds
+
+
+def get_youtube_service()
+    creds = get_credentials()
+    if not creds
+        return None
+    return build(youtube, v3, credentials=creds)
+
 
 st.set_page_config(page_title=YouTube Insights Tool)
 
 st.title(YouTube Insights Tool)
-st.write(Upload your `client_secret.json` and enter a YouTube video URL to begin analysis.)
+
+# Ensure OAuth credentials are available
+if google not in st.secrets
+    st.error(Google OAuth credentials missing in `secrets.toml`.)
+    st.stop()
+
+# Process OAuth2 redirect
+query_params = st.experimental_get_query_params()
+if code in query_params and state in query_params
+    if (
+        state in st.session_state
+        and st.session_state[state] == query_params[state][0]
+    )
+        flow = get_flow()
+        flow.fetch_token(code=query_params[code][0])
+        st.session_state.credentials = creds_to_dict(flow.credentials)
+        st.experimental_set_query_params()
+        st.experimental_rerun()
+
+creds = get_credentials()
+
+if creds
+    st.success(Authenticated with Google)
+    if st.button(Logout)
+        del st.session_state.credentials
+        st.experimental_rerun()
+    youtube = get_youtube_service()
+    if youtube
+        # Example request listing user's channels
+        channels = (
+            youtube.channels()
+            .list(part=snippet,statistics, mine=True)
+            .execute()
+        )
+        st.json(channels)
+else
+    if st.button(Login with Google)
+        flow = get_flow()
+        auth_url, state = flow.authorization_url(
+            access_type=offline,
+            include_granted_scopes=true,
+            prompt=consent,
+        )
+        st.session_state[state] = state
+        st.markdown(f[Continue here]({auth_url}))
+        st.stop()
